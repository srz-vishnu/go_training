package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"gqlgen-crud/graph/model"
	"strconv"
)

// CreateSystem is the resolver for the createSystem field.
func (r *mutationResolver) CreateSystem(ctx context.Context, input model.NewSystem) (*model.System, error) {
	system := &model.System{
		Name: input.Name,
		ID:   input.ID,
		Os:   input.Os,
	}
	r.systems = append(r.systems, system)
	return system, nil

}

// UpdateSystem is the resolver for the updateSystem field.
func (r *mutationResolver) UpdateSystem(ctx context.Context, id *int, input model.NewSystem) (*model.System, error) {
	system := &model.System{
		Name: input.Name,
		ID:   input.ID,
		Os:   input.Os,
	}
	tempid := *id

	for i, val := range r.systems {
		if val.ID == strconv.Itoa(tempid) {
			r.systems[i] = system
		}
	}

	return system, nil
}

// DeleteSystem is the resolver for the deleteSystem field.
func (r *mutationResolver) DeleteSystem(ctx context.Context, id *int) ([]*model.System, error) {
	tempid := *id

	for i, val := range r.systems {
		if val.ID == strconv.Itoa(tempid) {
			r.systems = append(r.systems[:i], r.systems[i+1:]...) //deleting an element from slice
		}
	}
	return r.systems, nil
}

// Systems is the resolver for the systems field.
func (r *queryResolver) Systems(ctx context.Context) ([]*model.System, error) {
	return r.systems, nil

}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
